mutate(mig_rate = round(migrants / n, digits = 3)) %>%
group_by(lieump, generation) %>%
mutate(migration_rate = mig_rate / sum(mig_rate)) %>%
ungroup() %>%
filter(generation < 15, !is.na(lieump)) %>%          # CROPPING GENERATIONS
group_by(-generation) %>%
mutate( g = cur_group_id() ) %>%
ungroup() %>%
select(-generation)  %>%
dplyr::rename(generation = g,
birth_location = lieump,
marriage_location = lieum) %>%
select(birth_location, marriage_location, generation, migration_rate)
write.csv(fertility_rate, file = "~/Documents/simulate_real_pedigrees/data/saguenay_fertility_rate.csv", row.names = F)
write.csv(migration_rate, file = "~/Documents/simulate_real_pedigrees/data/saguenay_migration_rate.csv", row.names = F)
fertility_rate %>% filter(location == 3677)
fertility_rate %>% filter(location == 3677) %>% fill(fertility, .direction = "up")
fertility_rate %>% filter(location == 3677) %>% tidyr::fill(fertility, .direction = "up")
# generation depth for each mother
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# rename to mother for inner_join
dplyr::rename(mother = ind) %>%
# inner join restricts to mothers
inner_join(pedigree_full) %>%
# for each mother
group_by(generation, lieump, mother) %>%
# count number of children
tally() %>%
ungroup()%>%
complete(generation,fill = list(n = 0)) %>% filter(location == 3677)
# generation depth for each mother
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# rename to mother for inner_join
dplyr::rename(mother = ind) %>%
# inner join restricts to mothers
inner_join(pedigree_full) %>%
# for each mother
group_by(generation, lieump, mother) %>%
# count number of children
tally() %>%
ungroup()%>%
tidyr::complete(generation,fill = list(n = 0)) %>% filter(location == 3677)
# generation depth for each mother
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# rename to mother for inner_join
dplyr::rename(mother = ind) %>%
# inner join restricts to mothers
inner_join(pedigree_full) %>%
# for each mother
group_by(generation, lieump, mother) %>%
# count number of children
tally() %>%
ungroup()%>%
tidyr::complete(generation,fill = list(n = 0)) %>% filter(lieump == 3677)
# generation depth for each mother
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# rename to mother for inner_join
dplyr::rename(mother = ind) %>%
# inner join restricts to mothers
inner_join(pedigree_full) %>%
# for each mother
group_by(generation, lieump, mother) %>%
# count number of children
tally() %>%
ungroup()%>%
tidyr::complete(generation,lieump,fill = list(n = 0)) %>% filter(lieump == 3677)
# compute maternal fertility rate for each location and generation
fertility_rate <-
# generation depth for each mother
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# rename to mother for inner_join
dplyr::rename(mother = ind) %>%
# inner join restricts to mothers
inner_join(pedigree_full) %>%
# for each mother
group_by(generation, lieump, mother) %>%
# count number of children
tally() %>%
ungroup()%>%
tidyr::complete(generation,lieump,
fill = list(n = 0)) %>%
# for each location and generation
group_by(generation, lieump) %>%
# get mean number of children
dplyr::summarise(fertility = mean(n)) %>%
ungroup() %>%
filter(generation < 15, !is.na(lieump)) %>%          # CROPPING GENERATIONS
group_by(-generation) %>%
mutate( g = cur_group_id() ) %>%
ungroup() %>%
select(-generation) %>%
dplyr::rename(generation = g,
location = lieump) %>%
select(location, generation, fertility)
fertility_rate %>% filter(location == 3677) %>% tidyr::fill(fertility, .direction = "up")
fertility_rate %>% filter(location == 3677) %>% mutate(fertility = ifelse(fertility==0,NA,fertility)) %>% tidyr::fill(fertility, .direction = "up")
fertility_rate %>% filter(location == 3677) %>% mutate(fertility = ifelse(fertility==0,NA,fertility)) %>% tidyr::fill(fertility, .direction = "updown")
# compute maternal fertility rate for each location and generation
fertility_rate <-
# generation depth for each mother
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# rename to mother for inner_join
dplyr::rename(mother = ind) %>%
# inner join restricts to mothers
inner_join(pedigree_full) %>%
# for each mother
group_by(generation, lieump, mother) %>%
# count number of children
tally() %>%
ungroup()%>%
tidyr::complete(generation,lieump,
fill = list(n = 0)) %>%
# for each location and generation
group_by(generation, lieump) %>%
# get mean number of children
dplyr::summarise(fertility = mean(n)) %>%
ungroup() %>%
filter(generation < 15, !is.na(lieump)) %>%          # CROPPING GENERATIONS
group_by(-generation) %>%
mutate( g = cur_group_id() ) %>%
ungroup() %>%
select(-generation) %>%
dplyr::rename(generation = g,
location = lieump) %>%
select(location, generation, fertility) %>%
mutate(fertility = ifelse(fertility==0,NA,fertility)) %>%
tidyr::fill(fertility, .direction = "updown")
pop_size <-
# generation depth for each individual
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# include marriage location
inner_join(pedigree_full) %>%
# for each location and generation
group_by(generation, lieump) %>%
# count number of individuals
tally() %>%
ungroup()
normalit<-function(m){
(m - min(m))/(max(m)-min(m))
}
migration_rate <-
# generation depth for each individual
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# include marriage location
inner_join(pedigree_full) %>%
# for each generation and each pair of locations
group_by(generation, lieump, lieum) %>%
# count the number of migrants
tally(name = "migrants") %>%
ungroup() %>%
# include the population size of the source town
left_join(pop_size) %>%
# compute migration rate
mutate(mig_rate = round(migrants / n, digits = 3)) %>%
group_by(lieump, generation) %>%
mutate(migration_rate = mig_rate / sum(mig_rate)) %>%
ungroup() %>%
filter(generation < 15, !is.na(lieump)) %>%          # CROPPING GENERATIONS
group_by(-generation) %>%
mutate( g = cur_group_id() ) %>%
ungroup() %>%
select(-generation)  %>%
dplyr::rename(generation = g,
birth_location = lieump,
marriage_location = lieum) %>%
select(birth_location, marriage_location, generation, migration_rate)
write.csv(fertility_rate, file = "~/Documents/simulate_real_pedigrees/data/saguenay_fertility_rate.csv", row.names = F)
write.csv(migration_rate, file = "~/Documents/simulate_real_pedigrees/data/saguenay_migration_rate.csv", row.names = F)
migration_rate <-
# generation depth for each individual
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# include marriage location
inner_join(pedigree_full) %>%
# for each generation and each pair of locations
group_by(generation, lieump, lieum) %>%
# count the number of migrants
tally(name = "migrants") %>%
ungroup()%>%
tidyr::complete(generation,lieump,lieum,
fill = list(n = 0)) %>%
# include the population size of the source town
left_join(pop_size) %>%
# compute migration rate
mutate(mig_rate = round(migrants / n, digits = 3)) %>%
group_by(lieump, generation) %>%
mutate(migration_rate = mig_rate / sum(mig_rate)) %>%
ungroup() %>%
filter(generation < 15, !is.na(lieump)) %>%          # CROPPING GENERATIONS
group_by(-generation) %>%
mutate( g = cur_group_id() ) %>%
ungroup() %>%
select(-generation)  %>%
dplyr::rename(generation = g,
birth_location = lieump,
marriage_location = lieum) %>%
select(birth_location, marriage_location, generation, migration_rate)
migration_rate %>% filter(birth_location == 3677)
migration_rate %>% filter(birth_location == 3677, generation == 3)
migration_rate %>% filter(birth_location == 3677, generation == 3) %>% distinct(migration_rate)
# compute maternal fertility rate for each location and generation
fertility_rate <-
# generation depth for each mother
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# rename to mother for inner_join
dplyr::rename(mother = ind) %>%
# inner join restricts to mothers
inner_join(pedigree_full) %>%
# for each mother
group_by(generation, lieump, mother) %>%
# count number of children
tally() %>%
ungroup()%>%
tidyr::complete(generation,lieump,
fill = list(n = 0)) %>%
# for each location and generation
group_by(generation, lieump) %>%
# get mean number of children
dplyr::summarise(fertility = mean(n)) %>%
ungroup() %>%
filter(generation < 15, !is.na(lieump)) %>%          # CROPPING GENERATIONS
group_by(-generation) %>%
mutate( g = cur_group_id() ) %>%
ungroup() %>%
select(-generation) %>%
dplyr::rename(generation = g,
location = lieump) %>%
select(location, generation, fertility) %>%
mutate(fertility = ifelse(fertility==0,NA,fertility)) %>%
tidyr::fill(fertility, .direction = "updown")
pop_size <-
# generation depth for each individual
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# include marriage location
inner_join(pedigree_full) %>%
# for each location and generation
group_by(generation, lieump) %>%
# count number of individuals
tally() %>%
ungroup()
normalit<-function(m){
(m - min(m))/(max(m)-min(m))
}
migration_rate <-
# generation depth for each individual
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# include marriage location
inner_join(pedigree_full) %>%
# for each generation and each pair of locations
group_by(generation, lieump, lieum) %>%
# count the number of migrants
tally(name = "migrants") %>%
ungroup()%>%
tidyr::complete(generation,lieump,lieum,
fill = list(n = 0)) %>%
# include the population size of the source town
left_join(pop_size) %>%
# compute migration rate
mutate(mig_rate = round(migrants / n, digits = 3)) %>%
group_by(lieump, generation) %>%
mutate(migration_rate = mig_rate / sum(mig_rate)) %>%
ungroup() %>%
filter(generation < 15, !is.na(lieump)) %>%          # CROPPING GENERATIONS
group_by(-generation) %>%
mutate( g = cur_group_id() ) %>%
ungroup() %>%
select(-generation)  %>%
dplyr::rename(generation = g,
birth_location = lieump,
marriage_location = lieum) %>%
select(birth_location, marriage_location, generation, migration_rate) %>%
mutate(migration_rate = ifelse(migration_rate==0,NA,migration_rate)) %>%
tidyr::fill(migration_rate, .direction = "updown")
write.csv(fertility_rate, file = "~/Documents/simulate_real_pedigrees/data/saguenay_fertility_rate.csv", row.names = F)
write.csv(migration_rate, file = "~/Documents/simulate_real_pedigrees/data/saguenay_migration_rate.csv", row.names = F)
# compute maternal fertility rate for each location and generation
fertility_rate <-
# generation depth for each mother
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# rename to mother for inner_join
dplyr::rename(mother = ind) %>%
# inner join restricts to mothers
inner_join(pedigree_full) %>%
# for each mother
group_by(generation, lieump, mother) %>%
# count number of children
tally() %>%
ungroup()%>%
tidyr::complete(generation,lieump,
fill = list(n = 0)) %>%
# for each location and generation
group_by(generation, lieump) %>%
# get mean number of children
dplyr::summarise(fertility = mean(n)) %>%
ungroup() %>%
filter(generation < 15, !is.na(lieump)) %>%          # CROPPING GENERATIONS
group_by(-generation) %>%
mutate( g = cur_group_id() ) %>%
ungroup() %>%
select(-generation) %>%
dplyr::rename(generation = g,
location = lieump) %>%
select(location, generation, fertility) %>%
mutate(fertility = ifelse(fertility==0,NA,fertility)) %>%
tidyr::fill(fertility, .direction = "updown")
pop_size <-
# generation depth for each individual
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# include marriage location
inner_join(pedigree_full) %>%
# for each location and generation
group_by(generation, lieump) %>%
# count number of individuals
tally() %>%
ungroup()
normalit<-function(m){
(m - min(m))/(max(m)-min(m))
}
migration_rate <-
# generation depth for each individual
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# include marriage location
inner_join(pedigree_full) %>%
# for each generation and each pair of locations
group_by(generation, lieump, lieum) %>%
# count the number of migrants
tally(name = "migrants") %>%
ungroup()%>%
tidyr::complete(generation,lieump,lieum,
fill = list(n = 0)) %>%
# include the population size of the source town
left_join(pop_size) %>%
# compute migration rate
mutate(mig_rate = round(migrants / n, digits = 3)) %>%
group_by(lieump, generation) %>%
mutate(migration_rate = mig_rate / sum(mig_rate)) %>%
ungroup() %>%
filter(generation < 15, !is.na(lieump)) %>%          # CROPPING GENERATIONS
group_by(-generation) %>%
mutate( g = cur_group_id() ) %>%
ungroup() %>%
select(-generation)  %>%
dplyr::rename(generation = g,
birth_location = lieump,
marriage_location = lieum)
write.csv(fertility_rate, file = "~/Documents/simulate_real_pedigrees/data/saguenay_fertility_rate.csv", row.names = F)
write.csv(migration_rate, file = "~/Documents/simulate_real_pedigrees/data/saguenay_migration_rate.csv", row.names = F)
# compute maternal fertility rate for each location and generation
fertility_rate <-
# generation depth for each mother
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# rename to mother for inner_join
dplyr::rename(mother = ind) %>%
# inner join restricts to mothers
inner_join(pedigree_full) %>%
# for each mother
group_by(generation, lieump, mother) %>%
# count number of children
tally() %>%
ungroup()%>%
tidyr::complete(generation,lieump,
fill = list(n = 0)) %>%
# for each location and generation
group_by(generation, lieump) %>%
# get mean number of children
dplyr::summarise(fertility = mean(n)) %>%
ungroup() %>%
filter(generation < 10, !is.na(lieump)) %>%          # CROPPING GENERATIONS
group_by(-generation) %>%
mutate( g = cur_group_id() ) %>%
ungroup() %>%
select(-generation) %>%
dplyr::rename(generation = g,
location = lieump) %>%
select(location, generation, fertility) %>%
mutate(fertility = ifelse(fertility==0,NA,fertility)) %>%
tidyr::fill(fertility, .direction = "updown")
pop_size <-
# generation depth for each individual
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# include marriage location
inner_join(pedigree_full) %>%
# for each location and generation
group_by(generation, lieump) %>%
# count number of individuals
tally() %>%
ungroup()
normalit<-function(m){
(m - min(m))/(max(m)-min(m))
}
migration_rate <-
# generation depth for each individual
max_depth %>%
# remove missing data
filter(!is.na(ind)) %>%
# include marriage location
inner_join(pedigree_full) %>%
# for each generation and each pair of locations
group_by(generation, lieump, lieum) %>%
# count the number of migrants
tally(name = "migrants") %>%
ungroup()%>%
# include the population size of the source town
left_join(pop_size) %>%
# compute migration rate
mutate(mig_rate = round(migrants / n, digits = 3)) %>%
group_by(lieump, generation) %>%
mutate(migration_rate = mig_rate / sum(mig_rate)) %>%
ungroup() %>%
filter(generation < 10, !is.na(lieump)) %>%          # CROPPING GENERATIONS
group_by(-generation) %>%
mutate( g = cur_group_id() ) %>%
ungroup() %>%
select(-generation)  %>%
dplyr::rename(generation = g,
birth_location = lieump,
marriage_location = lieum)
write.csv(fertility_rate, file = "~/Documents/simulate_real_pedigrees/data/saguenay_fertility_rate.csv", row.names = F)
write.csv(migration_rate, file = "~/Documents/simulate_real_pedigrees/data/saguenay_migration_rate.csv", row.names = F)
# load library
library(dplyr)
library(data.table)
# load function
source("maximum_genealogical_depth.R")
# load lon lat coordinates
locations <- fread("location_key.csv") %>% dplyr::rename(lieum = lieu)
# load pedigree
pedigree <- fread("tout_balsac.csv") %>% left_join(locations, by ="lieum")
setwd("~/Documents/genome_simulations/code/")
# load library
library(dplyr)
library(data.table)
# load function
source("maximum_genealogical_depth.R")
# load lon lat coordinates
locations <- fread("location_key.csv") %>% dplyr::rename(lieum = lieu)
# load pedigree
pedigree <- fread("tout_balsac.csv") %>% left_join(locations, by ="lieum")
pedigree
locations
locations <- fread("../misc/watershed_locations_feb2022.csv") %>% dplyr::rename(lieum = lieu)
# load pedigree
pedigree <- fread("tout_balsac.csv") %>% left_join(locations, by ="lieum")
pedigree
pedigree %>% filter(a == "Saguenay")
pedigree %>% filter(a == "Saguenay") %>% group_by(min_wts_name) %>% tally()
# individuals who married between since 1920
time_slice <- pedigree %>% filter(datem > 1920)
# remove parents to keep a single generation
probands <- time_slice %>% filter(!ind %in% c(time_slice$mother, time_slice$father))
# create single list of IDs
list_of_probands <- probands %>% pull(ind)
# climb tree and keep track of maximum generation relative to probands
ascending_pedigree <- maximum_genealogical_depth(pedigree, list_of_probands)
time_slice
time_slice %>% group_by(min_wts_name) %>% tally() %>% arrange(-n)
time_slice %>% filter(a == "Saguenay") %>% group_by(min_wts_name) %>% tally() %>% arrange(-n)
# load library
library(dplyr)
library(data.table)
# load function
source("maximum_genealogical_depth.R")
# load lon lat coordinates
locations <- fread("../misc/watershed_locations_feb2022.csv") %>% dplyr::rename(lieum = lieu)
# load pedigree
pedigree <- fread("tout_balsac.csv") %>% left_join(locations, by ="lieum")
# individuals who married between since 1920
time_slice <- pedigree %>% filter(datem > 1920)
# remove parents to keep a single generation
probands <- time_slice %>% filter(!ind %in% c(time_slice$mother, time_slice$father),
min_wts_name == "Lac Saint-Jean")
# create single list of IDs
list_of_probands <- probands %>% pull(ind)
# climb tree and keep track of maximum generation relative to probands
ascending_pedigree <- maximum_genealogical_depth(pedigree, list_of_probands)
# select columns of interest
out <- ascending_pedigree %>% dplyr::select(ind, mother, father, generation)
# write output file
fwrite(out, file = "lac_saint_jean_ascending_pedigree.txt")
