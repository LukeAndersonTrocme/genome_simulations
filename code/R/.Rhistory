theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks= element_blank(),
panel.grid = element_blank(),
plot.margin = margin(0,0,0,0),
legend.title = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.text=element_text(size=rel(0.8)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_rect(fill = "aliceblue"))
locs_sf <- inner_join(iid_umap_pca, og_ped) %>%
filter(!is.na(Lon)) %>%
group_by(Lon, Lat) %>%
dplyr::sample_frac(., size = 1) %>%
slice_head(., n = 50) %>%
st_as_sf(coords = c("Lon", "Lat"), crs = 4269) %>%
st_transform(crs = 3358) %>% # crs with meters
st_jitter(amount = 5000)
geo_plot <-
ggplot() +
geom_sf(data=political_processed %>% filter(juri_en %in% c("Quebec")), fill = "gray95", color = "black") +
geom_sf(data = locs_sf,
aes(color = rgb)) +
coord_sf(xlim = c(-73,-69),
ylim = c(47,49.2)) +
scale_color_identity() +
theme_bw()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks= element_blank(),
panel.grid = element_blank(),
plot.margin = margin(0,0,0,0),
legend.title = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.text=element_text(size=rel(0.8)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_rect(fill = "aliceblue"))
cowplot::plot_grid(plt_umap, geo_plot)
locs_sf <- inner_join(iid_umap_pca, og_ped) %>%
filter(!is.na(Lon)) %>%
group_by(Lon, Lat) %>%
dplyr::sample_frac(., size = 1) %>%
slice_head(., n = 10) %>%
st_as_sf(coords = c("Lon", "Lat"), crs = 4269) %>%
st_transform(crs = 3358) %>% # crs with meters
st_jitter(amount = 5000)
geo_plot <-
ggplot() +
geom_sf(data=political_processed %>% filter(juri_en %in% c("Quebec")), fill = "gray95", color = "black") +
geom_sf(data = locs_sf,
aes(color = rgb)) +
coord_sf(xlim = c(-73,-69),
ylim = c(47,49.2)) +
scale_color_identity() +
theme_bw()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks= element_blank(),
panel.grid = element_blank(),
plot.margin = margin(0,0,0,0),
legend.title = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.text=element_text(size=rel(0.8)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_rect(fill = "aliceblue"))
out_plot <- cowplot::plot_grid(plt_umap, geo_plot, align = "v", axis = "l")
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 15, width = 21, dpi = 400)
out_plot <- cowplot::plot_grid(plt_umap, geo_plot, align = "v", axis = "b")
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 15, width = 21, dpi = 400)
out_plot <- cowplot::plot_grid(plt_umap, geo_plot, align = "hv", axis = "b")
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 15, width = 21, dpi = 400)
out_plot <- cowplot::plot_grid(plt_umap, geo_plot, align = "v", axis = "t")
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 15, width = 21, dpi = 400)
out_plot <- cowplot::plot_grid(plt_umap, geo_plot, align = "h", axis = "bt")
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 15, width = 21, dpi = 400)
out_plot <- cowplot::plot_grid(plt_umap, geo_plot, align = "h", axis = "bt", rel_heights = c(0.5,1))
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 15, width = 21, dpi = 400)
out_plot <- cowplot::plot_grid(plt_umap, geo_plot, rel_heights = c(0.5,1))
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 15, width = 21, dpi = 400)
out_plot <- cowplot::plot_grid(plt_umap, geo_plot, rel_widths = c(0.5,1))
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 15, width = 21, dpi = 400)
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 10, width = 20, dpi = 400)
out_plot <- cowplot::plot_grid(plt_umap, geo_plot, rel_widths = c(0.75,1))
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 10, width = 20, dpi = 400)
out_plot <- cowplot::plot_grid(plt_umap, geo_plot, rel_widths = c(0.85,1))
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 10, width = 20, dpi = 400)
geo_plot <-
ggplot() +
geom_sf(data=political_processed %>% filter(juri_en %in% c("Quebec")), fill = "gray95", color = "black") +
geom_sf(data = locs_sf,
aes(color = rgb)) +
coord_sf(xlim = c(-73,-69.5),
ylim = c(47,49.2)) +
scale_color_identity() +
theme_bw()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks= element_blank(),
panel.grid = element_blank(),
plot.margin = margin(0,0,0,0),
legend.title = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.text=element_text(size=rel(0.8)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_rect(fill = "aliceblue"))
out_plot <- cowplot::plot_grid(plt_umap, geo_plot, rel_widths = c(0.85,1))
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 10, width = 20, dpi = 400)
locs_sf <- inner_join(iid_umap_pca, og_ped) %>%
filter(!is.na(Lon)) %>%
group_by(Lon, Lat) %>%
dplyr::sample_frac(., size = 1) %>%
slice_head(., n = 50) %>%
st_as_sf(coords = c("Lon", "Lat"), crs = 4269) %>%
st_transform(crs = 3358) %>% # crs with meters
st_jitter(amount = 5000)
geo_plot <-
ggplot() +
geom_sf(data=political_processed %>% filter(juri_en %in% c("Quebec")), fill = "gray95", color = "black") +
geom_sf(data = locs_sf,
aes(color = rgb)) +
coord_sf(xlim = c(-73,-69.5),
ylim = c(47,49.2)) +
scale_color_identity() +
theme_bw()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks= element_blank(),
panel.grid = element_blank(),
plot.margin = margin(0,0,0,0),
legend.title = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.text=element_text(size=rel(0.8)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_rect(fill = "aliceblue"))
out_plot <- cowplot::plot_grid(plt_umap, geo_plot, rel_widths = c(0.85,1))
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped.jpg", height = 10, width = 20, dpi = 400)
plt_umap <- ggplot(iid_umap_pca, aes(x = UMAP1_2D, y = UMAP2_2D, color = rgb))+geom_point(size = 0.5)+scale_color_identity()# + theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
plt_umap
p1<-ggplot(iid_umap_pca, aes(x = PC1, y = PC2, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p2<-ggplot(iid_umap_pca, aes(x = PC3, y = PC4, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p3<-ggplot(iid_umap_pca, aes(x = PC5, y = PC6, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p4<-ggplot(iid_umap_pca, aes(x = PC7, y = PC8, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p5<-ggplot(iid_umap_pca, aes(x = PC9, y = PC10, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p6<-ggplot(iid_umap_pca, aes(x = PC11, y = PC12, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
cowplot::plot_grid(p1,p2,p3,p4,p5,p6, nrow =2)
cowplot::plot_grid(p1,p2,p3,p4,p5,p6, nrow =2)
ggplot(iid_umap_pca %>% filter(UMAP1_2D < 0), aes(x = UMAP1_2D, y = UMAP2_2D, color = rgb))+geom_point(size = 0.5)+scale_color_identity()
ggplot(iid_umap_pca %>% filter(UMAP1_2D > 0), aes(x = UMAP1_2D, y = UMAP2_2D, color = rgb))+geom_point(size = 0.5)+scale_color_identity()
ggplot(iid_umap_pca %>% filter(UMAP1_2D > 2.5), aes(x = UMAP1_2D, y = UMAP2_2D, color = rgb))+geom_point(size = 0.5)+scale_color_identity()
ball_ids <- iid_umap_pca %>% filter(UMAP1_2D > 2.5)
umap_geo <- cowplot::plot_grid(plt_umap, geo_plot, rel_widths = c(0.85,1))
p1<-ggplot(iid_umap_pca, aes(x = PC1, y = PC2, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p2<-ggplot(iid_umap_pca, aes(x = PC3, y = PC4, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p3<-ggplot(iid_umap_pca, aes(x = PC5, y = PC6, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p4<-ggplot(iid_umap_pca, aes(x = PC7, y = PC8, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p5<-ggplot(iid_umap_pca, aes(x = PC9, y = PC10, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p6<-ggplot(iid_umap_pca, aes(x = PC11, y = PC12, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
pca_plots <- cowplot::plot_grid(p1,p2,p3,p4,p5,p6, nrow =2)
out_plot <- cowplot::plot_grid(pca_plots, umap_geo, ncol = 1)
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_ped_pca_umap_geo.jpg", height = 20, width = 20, dpi = 400)
ggplot(iid_umap_pca %>% filter(UMAP1_2D > 2.5), aes(x = UMAP1_2D, y = UMAP2_2D, color = rgb))+geom_point(size = 0.5)+scale_color_identity()
SLSJ_pcs <- fread("~/Desktop/pcs_SLSJ_CVX_5+4_k2.txt")
##convert XYZ to RGB
XYZ_RGB <-
function(xyz) {
#normalize X,Y,Z to convert to RGB
X <- (xyz[,1] - min(xyz[,1])) /
(max(xyz[,1]) - min(xyz[,1]))
Y <- (xyz[,2] - min(xyz[,2])) /
(max(xyz[,2]) - min(xyz[,2]))
Z <- (xyz[,3] - min(xyz[,3])) /
(max(xyz[,3]) - min(xyz[,3]))
#in case there are missing values
X[is.na(X)] <- 0
Y[is.na(Y)] <- 0
Z[is.na(Z)] <- 0
#convert to RGB
out <- rgb(unlist(X),
unlist(Y),
unlist(Z))
return(out)
}
# UMAP parameters for 2D plot
a_2D <- 0.66
b_2D <- 0.8
# UMAP parameters for 3D colors
a_3D <- 0.05
b_3D <- 1
p <- SLSJ_pcs[,-c(1,2)]
# Run UMAP on 20 PC's
umap_2D <- uwot::umap(p, n_components = 2, a = a_2D, b = b_2D)
# bind to PCA data for downstream analyses
iid_umap_pca <- cbind(SLSJ_pcs, umap_2D) %>%
dplyr::rename(UMAP1_2D = V1, UMAP2_2D = V2)
# 3D UMAP (XYZ) converted to 3D Color (RGB)
umap_3D <- uwot::umap(p,n_components = 3,a = a_3D,b = b_3D)
iid_umap_pca$rgb <- XYZ_RGB(umap_3D)
library(sf)
plt_umap <- ggplot(iid_umap_pca, aes(x = UMAP1_2D, y = UMAP2_2D, color = rgb))+geom_point(size = 0.5)+scale_color_identity()# + theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
locations <- fread("~/Documents/Genizon/Data/watershed_locations_feb2022.csv") %>% dplyr::rename(lieum = lieu)
political_processed <- readRDS("~/Documents/geographic_data/political_processed.RDS")
simplified_water_area <- readRDS("~/Documents/geographic_data/simplified_water_area.RDS")
m_gplot <- readRDS(file = "/Users/luke/Documents/can_dem/quebec_raster_may2022_0.001_1e7_new_crs.RDS") %>% filter(value > 0) %>% mutate(value = ifelse(value >= 1000, 999,value))
og_ped <-
fread("/Users/luke/Documents/Genizon/BALSAC/cropped_balsac/SLSJ_CVX_5+4_k2_pedigree.txt") %>%
#fread("~/Documents/Genizon/BALSAC/cropped_balsac/SLSJ_CVX_recode_pedigree_12.txt") %>%
dplyr::rename(IID = ind) %>%
left_join(locations) %>%
dplyr::select(IID, Lon, Lat)
locs_sf <- inner_join(iid_umap_pca, og_ped) %>%
filter(!is.na(Lon)) %>%
group_by(Lon, Lat) %>%
dplyr::sample_frac(., size = 1) %>%
slice_head(., n = 50) %>%
st_as_sf(coords = c("Lon", "Lat"), crs = 4269) %>%
st_transform(crs = 3358) %>% # crs with meters
st_jitter(amount = 5000)
geo_plot <-
ggplot() +
geom_sf(data=political_processed %>% filter(juri_en %in% c("Quebec")), fill = "gray95", color = "black") +
geom_sf(data = locs_sf,
aes(color = rgb)) +
coord_sf(xlim = c(-73,-69.5),
ylim = c(47,49.2)) +
scale_color_identity() +
theme_bw()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks= element_blank(),
panel.grid = element_blank(),
plot.margin = margin(0,0,0,0),
legend.title = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.text=element_text(size=rel(0.8)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_rect(fill = "aliceblue"))
umap_geo <- cowplot::plot_grid(plt_umap, geo_plot, rel_widths = c(0.85,1))
p1<-ggplot(iid_umap_pca, aes(x = PC1, y = PC2, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p2<-ggplot(iid_umap_pca, aes(x = PC3, y = PC4, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p3<-ggplot(iid_umap_pca, aes(x = PC5, y = PC6, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p4<-ggplot(iid_umap_pca, aes(x = PC7, y = PC8, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p5<-ggplot(iid_umap_pca, aes(x = PC9, y = PC10, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
p6<-ggplot(iid_umap_pca, aes(x = PC11, y = PC12, color = rgb))+geom_point(size = 0.5)+scale_color_identity() +theme_bw()+theme(axis.text = element_blank(), axis.ticks = element_blank())
pca_plots <- cowplot::plot_grid(p1,p2,p3,p4,p5,p6, nrow =2)
out_plot <- cowplot::plot_grid(pca_plots, umap_geo, ncol = 1)
ggsave(out_plot, file = "~/Documents/Genizon/Genizon_Scripts/Latex/Figures/test_slsj_pedsim_pca_umap_geo.jpg", height = 20, width = 20, dpi = 400)
library(data.table, dplyr)
df <- fread("/Users/luke/Documents/genome_simulations/misc/watershed_locations_feb2022.csv")
df
df %>%
select(Lon,Lat,resid,t,a,min_wts_name,WSCSSDA)
library(data.table)
library(dplyr)
df <- fread("/Users/luke/Documents/genome_simulations/misc/watershed_locations_feb2022.csv")
df %>%
select(Lon,Lat,resid,t,a,min_wts_name,WSCSSDA)
df %>%
select(Lon,Lat,resid,t,a,min_wts_name,WSCSSDA) %>%
unique()
df %>%
select(Lon,Lat,resid,t,a,min_wts_name,WSCSSDA) %>%
unique() %>%
write.csv(file = "/Users/luke/Documents/genome_simulations/misc/location_metadata.csv")
df %>%
select(Lon,Lat,resid,t,a,min_wts_name,WSCSSDA) %>%
unique() %>%
write.csv(file = "/Users/luke/Documents/genome_simulations/misc/location_metadata.csv", row.names = F)
8+8
library(data.table)
library(dplyr)
fts_ped <-
fread("~/Documents/simulate_real_pedigrees/data/fts_SLSJ_CVX_5+4_k2.csv") %>%
dplyr::rename(ind = individual,
generation = time,
lieump = birth_location,
lieum = marriage_location,
datemp = birth_date,
datem = marriage_date,
) %>%
dplyr::select(ind, mother, father, generation, datemp, lieump, sex, datem, lieum)
View(fts_ped)
# load library
library(dplyr)
library(data.table)
# load function
source("maximum_genealogical_depth.R")
# load function
setwd("/Users/luke/Documents/genome_simulations/code/R/")
source("maximum_genealogical_depth.R")
source("get_extended_family.R")
# set random seed for reproducibility
set.seed(456)
# load lon lat coordinates
locations <- fread("../misc/watershed_locations_feb2022.csv") %>% dplyr::rename(lieum = lieu)
# load lon lat coordinates
locations <- fread("../../misc/watershed_locations_feb2022.csv") %>% dplyr::rename(lieum = lieu)
# load pedigree
pedigree <- fread("../tout_balsac.csv") %>% left_join(locations, by ="lieum")
# load pedigree
pedigree <- fread("../tout_balsac.csv") %>% left_join(locations, by ="lieum")
# individuals who married between since 1920
time_slice <- pedigree %>% filter(datem > 1920)
# remove parents to keep a single generation
probands <- time_slice %>% filter(!ind %in% c(time_slice$mother, time_slice$father),
min_wts_name == "Lac Saint-Jean")
# create single list of IDs
list_of_probands <- probands %>% pull(ind)
extended_families <- get_extended_family(pedigree, probands$ind)
extended_families
extended_families <- get_extended_family(three_col_ped, probands$ind)
three_col_ped <- pedigree %>% select(ind, mother, father)
extended_families <- get_extended_family(three_col_ped, probands$ind)
extended_families
extended_families
extended_families <- get_extended_family(three_col_ped, probands$ind) %>%
dplyr::select(ind, grand_mother.mom, grand_father.mom, grand_mother.dad, grand_father.dad)
extended_families
extended_families %>% tidyr::pivot_longer(values_to = ind)
extended_families %>% tidyr::pivot_longer(values_to = ind, cols = c(grand_mother.mom, grand_father.mom, grand_mother.dad, grand_father.dad))
extended_families %>% tidyr::pivot_longer(!ind, names_to = "ancestor")
extended_families %>% tidyr::pivot_longer(!ind, names_to = "relationship", values_to = "ancestor")
extended_families %>% tidyr::pivot_longer(!ind, names_to = "relationship", values_to = "ancestor") %>% mutate(id = stringr::str_split(relationship,pattern = "."))
extended_families %>% tidyr::pivot_longer(!ind, names_to = "relationship", values_to = "ancestor") %>% stringr::str_split(relationship,pattern = ".")
extended_families %>% tidyr::pivot_longer(!ind, names_to = "relationship", values_to = "ancestor") %>% stringr::str_split(.,relationship,pattern = ".")
locations
unique(locations$a)
extended_families %>% tidyr::pivot_longer(!ind, names_to = "relationship", values_to = "ancestor") %>% tidyr::separate(relationship,into = c("relationship","couple"), sep = ".")
extended_families %>% tidyr::pivot_longer(!ind, names_to = "relationship", values_to = "ancestor") %>% tidyr::separate(.,relationship,into = c("relationship","couple"), sep = ".")
extended_families %>% tidyr::pivot_longer(!ind, names_to = "relationship", values_to = "ancestor") %>% tidyr::separate(.,relationship,into = c("rel","couple"), sep = ".", remove = F)
extended_families %>% tidyr::pivot_longer(!ind, names_to = "relationship", values_to = "ancestor") %>% tidyr::separate(.,relationship,into = c("rel","couple"), remove = F)
extended_families %>% tidyr::pivot_longer(!ind, names_to = "relationship", values_to = "ancestor") %>% tidyr::separate(.,relationship,into = c("rel","couple"),sep = 13, remove = F)
extended_families %>% tidyr::pivot_longer(!ind, names_to = "relationship", values_to = "ancestor") %>% tidyr::separate(.,relationship,into = c("rel","couple"),sep = 13, remove = F) %>% tidyr::pivot_wider(names_from = "couple", values_from = "ancestor")
extended_families %>% tidyr::pivot_longer(!ind, names_to = "relationship", values_to = "ancestor") %>% tidyr::separate(.,relationship,into = c("rel","couple"),sep = 13, remove = F) %>% tidyr::pivot_wider(names_from = "rel", values_from = "ancestor")
extended_families
extended_families %>% dplyr::select(ind, grand_mother.mom, grand_father.mom) %>% rename_with(~str_remove(., '.mom'))
extended_families %>% dplyr::select(ind, grand_mother.mom, grand_father.mom) %>% rename_with(~stringr:: str_remove(., '.mom'))
maternal_grand_parents <- extended_families %>% dplyr::select(ind, grand_mother.mom, grand_father.mom) %>% rename_with(~stringr::str_remove(., '.mom'))
paternal_grand_parents <- extended_families %>% dplyr::select(ind, grand_mother.dad, grand_father.dad) %>% rename_with(~stringr::str_remove(., '.dad'))
grand_parents <- bind_rows(maternal_grand_parents, paternal_grand_parents) %>% drop_na %>% distinct(ind, grand_mother, grand_father)
grand_parents <- bind_rows(maternal_grand_parents, paternal_grand_parents) %>% filter(complete.cases(.)) %>% distinct(ind, grand_mother, grand_father)
grand_parents
no_cousins <-
bind_rows(maternal_grand_parents, paternal_grand_parents) %>%
filter(complete.cases(.)) %>%
distinct(ind, grand_mother, grand_father) %<%
group_by(grand_mother, grand_father) %>%
slice_sample(n=1)
no_cousins <-
bind_rows(maternal_grand_parents, paternal_grand_parents) %>%
filter(complete.cases(.)) %>%
distinct(ind, grand_mother, grand_father) %>%
group_by(grand_mother, grand_father) %>%
slice_sample(n=1)
no_cousins
# load library
library(dplyr)
library(data.table)
# load function
setwd("/Users/luke/Documents/genome_simulations/code/R/")
source("maximum_genealogical_depth.R")
source("get_extended_family.R")
# set random seed for reproducibility
set.seed(456)
# load lon lat coordinates
locations <- fread("../../misc/watershed_locations_feb2022.csv") %>% dplyr::rename(lieum = lieu)
# load pedigree
pedigree <- fread("../tout_balsac.csv") %>% left_join(locations, by ="lieum")
# individuals who married between since 1920
time_slice <- pedigree %>% filter(datem > 1920)
# remove parents to keep a single generation
probands <- time_slice %>% filter(!ind %in% c(time_slice$mother, time_slice$father),
min_wts_name == "Lac Saint-Jean")
# three columns for extended family function
three_col_ped <- pedigree %>% select(ind, mother, father)
# get the grand parents for each individual
extended_families <- get_extended_family(three_col_ped, probands$ind) %>%
dplyr::select(ind, grand_mother.mom, grand_father.mom, grand_mother.dad, grand_father.dad)
# get both sets of grand parents
maternal_grand_parents <- extended_families %>% dplyr::select(ind, grand_mother.mom, grand_father.mom) %>% rename_with(~stringr::str_remove(., '.mom'))
paternal_grand_parents <- extended_families %>% dplyr::select(ind, grand_mother.dad, grand_father.dad) %>% rename_with(~stringr::str_remove(., '.dad'))
# create single list of IDs
list_of_probands  <-
# bind both sets of grand parents
bind_rows(maternal_grand_parents,
paternal_grand_parents) %>%
# remove missing data
filter(complete.cases(.)) %>%
# for each set of grand parents
group_by(grand_mother, grand_father) %>%
# choose one grand child
slice_sample(n=1) %>%
# avoid duplicate individuals (chosen from both sets of gp)
distinct(ind) %>%
pull(ind)
# climb tree and keep track of maximum generation relative to probands
ascending_pedigree <- maximum_genealogical_depth(pedigree, list_of_probands)
# select columns of interest
out <- ascending_pedigree %>% dplyr::select(ind, mother, father, generation)
# write output file
fwrite(out, file = "lac_saint_jean_ascending_pedigree_no_cousins.txt")
# write output file
fwrite(list_of_probands, file = "lac_saint_jean_ascending_pedigree_no_cousins_probands.txt")
list_of_probands
as.data.frame(list_of_probands)
# write output file
fwrite(as.data.frame(list_of_probands), file = "lac_saint_jean_ascending_pedigree_no_cousins_probands.txt")
#setwd("/Users/luke/Documents/genome_simulations/code/R")
# load library
library(dplyr)
library(data.table)
# load function
source("maximum_genealogical_depth.R")
# load function
source("get_extended_family.R")
# load pedigree
raw_pedigree <- fread("/Users/luke/Documents/Genizon/BALSAC/Balsac_aout_2021_v2/tout_balsac.csv")
locations <- fread("/Users/luke/Documents/genome_simulations/misc/location_key.csv") %>% dplyr::rename(lieum = lieu)
probands <- raw_pedigree %>%
filter(!ind %in% father,
!ind %in% mother,
!is.na(datem),
datem > 1900)
three_col_ped <- pedigree %>% select(ind, mother, father)
extended_families <- get_extended_family(three_col_ped, probands$ind)
relatives <- c("mother","father","grand_mother.mom","grand_father.mom","grand_mother.dad","grand_father.dad")
# count number of missing ancestors
extended_families$n_in <- rowSums( !is.na( select(extended_families, all_of(relatives))))
# keep track of individuals who are missing grand-parents
missing_grand_parents <- extended_families %>% filter(n_in<6) %>% pull(ind)
# NOTE: there are 311545 individuals removed
# create single list of IDs
list_of_probands <- probands %>% filter(!ind %in% missing_grand_parents) %>% pull(ind)
list_of_probands
# load pedigree
raw_pedigree <- fread("/Users/luke/Documents/Genizon/BALSAC/Balsac_aout_2021_v2/tout_balsac.csv")%>% left_join(locations, by ="lieum")
raw_pedigree
# load lon lat coordinates
locations <- fread("../../misc/watershed_locations_feb2022.csv") %>% dplyr::rename(lieum = lieu)
# load pedigree
raw_pedigree <- fread("/Users/luke/Documents/Genizon/BALSAC/Balsac_aout_2021_v2/tout_balsac.csv")%>% left_join(locations, by ="lieum")
raw_pedigree
for t in unique(locations$t){
for( t in unique(locations$t) ){
print(t)
}
setwd("/Users/luke/Documents/genome_simulations/code/R")
# load library
library(dplyr)
library(data.table)
# load function
source("maximum_genealogical_depth.R")
# load function
source("get_extended_family.R")
# load lon lat coordinates
locations <- fread("../../misc/watershed_locations_feb2022.csv") %>% dplyr::rename(lieum = lieu)
# load pedigree
raw_pedigree <- fread("/Users/luke/Documents/Genizon/BALSAC/Balsac_aout_2021_v2/tout_balsac.csv")%>% left_join(locations, by ="lieum")
probands <- raw_pedigree %>%
filter(!ind %in% father,
!ind %in% mother,
!is.na(datem),
datem > 1900)
three_col_ped <- pedigree %>% select(ind, mother, father)
extended_families <- get_extended_family(three_col_ped, probands$ind)
relatives <- c("mother","father","grand_mother.mom","grand_father.mom","grand_mother.dad","grand_father.dad")
# count number of missing ancestors
extended_families$n_in <- rowSums( !is.na( select(extended_families, all_of(relatives))))
# keep track of individuals who are missing grand-parents
missing_grand_parents <- extended_families %>% filter(n_in<6) %>% pull(ind)
# NOTE: there are 311545 individuals removed
# create single list of IDs
list_of_probands <- probands %>% filter(!ind %in% missing_grand_parents) %>% pull(ind)
# NOTE: there are 1426749 probands included
for( lieum in unique(locations$lieum) ){
subset_of_probands <-
raw_pedigree %>%
filter(ind %in% list_of_probands,
lieum == lieum) %>% pull(ind)
if(length(subset_of_probands) < 100){next}
# climb tree and keep track of maximum generation relative to probands
ascending_pedigree <- maximum_genealogical_depth(pedigree, subset_of_probands)
# select columns of interest
out <- ascending_pedigree %>% dplyr::select(ind, mother, father, generation)
# write output file
fwrite(out, file = paste0("town_pedigree/ascending_pedigree_",lieum,".txt"))
}
for( loc in unique(locations$lieum) ){
subset_of_probands <-
raw_pedigree %>%
filter(ind %in% list_of_probands,
lieum == loc) %>% pull(ind)
if(length(subset_of_probands) < 100){next}
print(paste("town",loc,"size",length(subset_of_probands)))
# climb tree and keep track of maximum generation relative to probands
ascending_pedigree <- maximum_genealogical_depth(pedigree, subset_of_probands)
# select columns of interest
out <- ascending_pedigree %>% dplyr::select(ind, mother, father, generation)
# write output file
fwrite(out, file = paste0("town_pedigree/ascending_pedigree_",loc,".txt"))
}
