fr_order <- c(
"Est",
"Britain",
"Ouest",
"Ile-de-France",
"Centre",
"Sud-Est",
"Sud-Ouest",
"Nord-Ouest"
)
fr_qc_regional_ibd$region2 <- factor(fr_qc_regional_ibd$region2, levels = fr_order)
lvl <- c(
"Ottawa River",
"Northern Quebec",
"St. Lawrence",
"Eastern",
"North Central",
"South Central",
"Saguenay"
)
fr_qc_regional_ibd$region1 <- factor(fr_qc_regional_ibd$region1, levels = lvl)
f1<- ggplot(fr_qc_regional_ibd,
aes(x = region1,
y = region2,
fill = mean))+
geom_tile() +
scale_fill_gradient(low = "white",
high = "black",
name = "IBD",
#breaks = c(0.65,0.7, 0.75),
#limits = c(0.64,0.755)
) +
theme_classic() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme(#axis.text.x = element_text(size = 20),
#axis.text.y = element_text(size = 30),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.margin = margin(0,0,0,0),
legend.position = "bottom",
legend.direction = "horizontal")
qc_regional_ibd_1D$region1 <- factor(qc_regional_ibd_1D$region1, levels = lvl)
ib1<-
ggplot(qc_regional_ibd_1D )+
geom_errorbar(aes(x = region1, y = mean,
ymin = mean - se,
ymax = mean + se),
width = 0, size = 0.3) +
geom_point(aes(x = region1, y = mean),
shape = 95,size = 5) +
labs(x = "Regions in Quebec", y = "Mean IBD with France") +
theme_bw() + #ylim(c(0.66,0.73)) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank())
fr_regional_ibd_1D$region2 <- factor(fr_regional_ibd_1D$region2, levels = fr_order)
ib2<-
ggplot(fr_regional_ibd_1D )+
geom_errorbar(aes(x = region2, y = mean,
ymin = mean - se,
ymax = mean + se),
width = 0, size = 0.3) +
geom_point(aes(x = region2, y = mean),
shape = 95,size = 5)+
labs(x = "Regions in France", y = "Mean IBD with Quebec") +
theme_bw() + #ylim(c(0.66,0.73)) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank())
plot_grid(plot_grid(ib2,ib1, labels = "AUTO"), f1, ncol =1, rel_heights = c(1,1.6), labels = c("","C"))
ggsave(file = paste0(figurePath,"ibd_fr_qc.jpg"), height = 7, width = 9, dpi = 400)
fr_order <- c(
"Est",
"Ouest",
"Britain",
"Ile-de-France",
"Centre",
"Sud-Est",
"Sud-Ouest",
"Nord-Ouest"
)
fr_qc_regional_ibd$region2 <- factor(fr_qc_regional_ibd$region2, levels = fr_order)
lvl <- c(
"Ottawa River",
"Northern Quebec",
"St. Lawrence",
"Eastern",
"North Central",
"South Central",
"Saguenay"
)
fr_qc_regional_ibd$region1 <- factor(fr_qc_regional_ibd$region1, levels = lvl)
f1<- ggplot(fr_qc_regional_ibd,
aes(x = region1,
y = region2,
fill = mean))+
geom_tile() +
scale_fill_gradient(low = "white",
high = "black",
name = "IBD",
#breaks = c(0.65,0.7, 0.75),
#limits = c(0.64,0.755)
) +
theme_classic() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme(#axis.text.x = element_text(size = 20),
#axis.text.y = element_text(size = 30),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.margin = margin(0,0,0,0),
legend.position = "bottom",
legend.direction = "horizontal")
qc_regional_ibd_1D$region1 <- factor(qc_regional_ibd_1D$region1, levels = lvl)
ib1<-
ggplot(qc_regional_ibd_1D )+
geom_errorbar(aes(x = region1, y = mean,
ymin = mean - se,
ymax = mean + se),
width = 0, size = 0.3) +
geom_point(aes(x = region1, y = mean),
shape = 95,size = 5) +
labs(x = "Regions in Quebec", y = "Mean IBD with France") +
theme_bw() + #ylim(c(0.66,0.73)) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank())
fr_regional_ibd_1D$region2 <- factor(fr_regional_ibd_1D$region2, levels = fr_order)
ib2<-
ggplot(fr_regional_ibd_1D )+
geom_errorbar(aes(x = region2, y = mean,
ymin = mean - se,
ymax = mean + se),
width = 0, size = 0.3) +
geom_point(aes(x = region2, y = mean),
shape = 95,size = 5)+
labs(x = "Regions in France", y = "Mean IBD with Quebec") +
theme_bw() + #ylim(c(0.66,0.73)) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank())
plot_grid(plot_grid(ib2,ib1, labels = "AUTO"), f1, ncol =1, rel_heights = c(1,1.6), labels = c("","C"))
ggsave(file = paste0(figurePath,"ibd_fr_qc.jpg"), height = 7, width = 9, dpi = 400)
ggsave(file = paste0(figurePath,"ibd_fr_qc.jpg"), height = 8, width = 10, dpi = 400)
fr_order <- c(
"Est",
"Ouest",
"Britain",
"Ile-de-France",
"Centre",
"Sud-Est",
"Sud-Ouest",
"Nord-Ouest"
)
fr_qc_regional_ibd$region2 <- factor(fr_qc_regional_ibd$region2, levels = fr_order)
lvl <- c(
"Ottawa River",
"Northern Quebec",
"St. Lawrence",
"Eastern",
"North Central",
"South Central",
"Saguenay"
)
fr_qc_regional_ibd$region1 <- factor(fr_qc_regional_ibd$region1, levels = lvl)
f1<- ggplot(fr_qc_regional_ibd,
aes(x = region1,
y = region2,
fill = mean))+
geom_tile() +
scale_fill_gradient(low = "white",
high = "black",
name = "IBD",
#breaks = c(0.65,0.7, 0.75),
#limits = c(0.64,0.755)
) +
theme_classic() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme(#axis.text.x = element_text(size = 20),
#axis.text.y = element_text(size = 30),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.margin = margin(0,0,0,0),
legend.position = "bottom",
legend.direction = "horizontal")
qc_regional_ibd_1D$region1 <- factor(qc_regional_ibd_1D$region1, levels = lvl)
ib1<-
ggplot(qc_regional_ibd_1D )+
geom_errorbar(aes(x = region1, y = mean,
ymin = mean - se,
ymax = mean + se),
width = 0, size = 0.3) +
geom_point(aes(x = region1, y = mean),
shape = 95,size = 5) +
labs(x = "Regions in Quebec", y = "Mean IBD with France") +
theme_bw() + #ylim(c(0.66,0.73)) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 8)) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank())
fr_regional_ibd_1D$region2 <- factor(fr_regional_ibd_1D$region2, levels = fr_order)
ib2<-
ggplot(fr_regional_ibd_1D )+
geom_errorbar(aes(x = region2, y = mean,
ymin = mean - se,
ymax = mean + se),
width = 0, size = 0.3) +
geom_point(aes(x = region2, y = mean),
shape = 95,size = 5)+
labs(x = "Regions in France", y = "Mean IBD with Quebec") +
theme_bw() + #ylim(c(0.66,0.73)) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 8)) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank())
plot_grid(plot_grid(ib2,ib1, labels = "AUTO"), f1, ncol =1, rel_heights = c(1,1.6), labels = c("","C"))
ggsave(file = paste0(figurePath,"ibd_fr_qc.jpg"), height = 8, width = 10, dpi = 400)
ggsave(file = paste0(figurePath,"ibd_fr_qc.jpg"), height = 8, width = 9, dpi = 400)
# clear global environment
rm(list=ls())
# load libraries
#library(dplyr)
library(tidyverse)
demoPath <- '/Users/luke/Documents/simulate_real_pedigrees/'
file_name <- paste0(demoPath,"data/permute_1.csv")
pedigree <-
data.table::fread(file_name) %>%
dplyr::select(ind, mother, father)
list_of_probands <-
data.table::fread(file_name) %>%
filter(generation == 0) %>%
pull(ind)
start.time <- Sys.time()
lineage_table <- coalescence_percolator(pedigree, list_of_probands)
# clear global environment
rm(list=ls())
# load libraries
#library(dplyr)
library(tidyverse)
# Get the deepest generation for each internal node
maximum_genealogical_depth <- function(pedigree, list_of_probands) {
# probands are individuals at generation 0
individuals <- data.frame(ind = list_of_probands, generation = 0)
# initialize output to append to downstream
gen_depth <- individuals
# for loop to iterate through generations
for(k in 1:18) {
individuals_parents <-
# start from the entire pedigree
pedigree %>%
# keep parents of individuals at generation 'k'
filter(ind %in% individuals$ind) %>%
# if parent is missing, flag individual as founder
mutate(founder = ifelse(is.na(father) | is.na(mother),T, F))
# stop climbing when there are only founders left
if(nrow(filter(individuals_parents, founder == F)) == 0){break}
# to ascend genealogy, parents become reference individuals
mothers <- unique(individuals_parents$mother)
fathers <- unique(individuals_parents$father)
# recursion step reassigns reference individuals
individuals <-
data.frame(ind = c(mothers, fathers), generation = k) %>%
filter(!is.na(ind)) # removes missing IDs
# output max depth per individual
gen_depth <-
# individuals already visited by climbing algorithm
gen_depth %>%
# remove duplicate individuals at 'k-1'
filter(!ind %in% individuals$ind) %>%
# append updated individuals 'k' generations deep
bind_rows(individuals)
}
return(gen_depth)
}
# Sum of kinships of ancestors to a list of probands
estimated_genetic_contribution <- function(pedigree, list_of_probands) {
# probands are individuals at generation 0
individuals <- data.frame(ind = list_of_probands,
number_of_probands = 1,
expected_contribution = 1)
# initialize output to append to downstream
kinship_to_probands <- individuals
# for loop to iterate through generations
for(k in 1:18) {
parents_of_individuals <-
left_join(individuals, pedigree, by = "ind") %>%
# if parent is missing, flag individual as founder
mutate(founder = ifelse(is.na(father) | is.na(mother),T, F),
mother = case_when(is.na(mother) ~ ind, TRUE ~ mother), # revert to selfing if founder
father = case_when(is.na(father) ~ ind, TRUE ~ father))
# stop climbing when there are only founders left
if(nrow(filter(parents_of_individuals, founder == F)) == 0){break}
probands_related_to_mother <-
parents_of_individuals %>%
group_by(mother) %>%
summarise(number_of_probands = sum(number_of_probands)) %>%
rename(ind = mother) %>%
ungroup()
probands_related_to_father <-
parents_of_individuals %>%
group_by(father) %>%
summarise(number_of_probands = sum(number_of_probands)) %>%
rename(ind = father) %>%
ungroup()
# recursion step reassigns reference individuals
individuals <-
bind_rows(probands_related_to_mother,
probands_related_to_father) %>%
mutate(expected_contribution = 2^-(k) * number_of_probands) %>%
filter(!is.na(ind)) # removes missing IDs
kinship_to_probands <- bind_rows(kinship_to_probands, individuals)
}
estimated_genetic_contribution <-
kinship_to_probands %>%
group_by(ind) %>%
# this sums across generations
summarise(expected_contribution = sum(expected_contribution))
return(estimated_genetic_contribution)
}
# Percolate coalescence statistics up the genealogy
coalescence_percolator <- function(pedigree, list_of_probands) {
# initialize table that will be updated with each iteration
lineage_table <-
# maximum genealogical depth for ancestors related to a given list of probands
maximum_genealogical_depth(pedigree, list_of_probands) %>%
# append total expected contribution for ancestors related to a given list of probands
left_join(estimated_genetic_contribution(pedigree, list_of_probands), by = "ind") %>%
# append 'mother' and 'father' columns (note : left_join restricts to ancestors related to probands)
left_join(pedigree, by = "ind") %>%
# initialize coalescence statistics to 0 (exception : probands are ancestral to themselves)
mutate(
# p_individual_is_ancestral : p that an individual contains material ancestral to probands
p_individual_is_ancestral = ifelse(generation == 0, 1, 0),
# q_no_coalescence : expected number of lineages had there been no coalescence
q_no_coalescence = 0,
# coalescence_rate : approximate coalescence rate per individual
coalescence_rate = 0,
# estimate how much an individual in the genealogy contributes to kinship among probands
realized_kinship = 0)
# for loop to iterate through generations
for(k in 1:max(lineage_table$generation)) {
print(k)
# list of ancestors at generation 'k'
individuals_at_generation_k <- lineage_table %>% filter(generation == k) %>% pull(ind)
# get offspring of mothers at generation k
mothers_at_generation_k <- filter(lineage_table, mother %in% individuals_at_generation_k)
mothers_realized_kinship <-
# pairwise combination of all offspring sharing the same mother
left_join(mothers_at_generation_k, mothers_at_generation_k, by = "mother") %>%
# limit to distinct offspring
filter(ind.x != ind.y) %>%
rowwise %>%
# sort names to avoid reciprocal/duplicates
mutate(name = toString(sort(c(ind.x,ind.y)))) %>%
# limits to all unique pairs of offspring
distinct(mother, name) %>%
# separate into numeric IDs for merging lineage table
separate(name, into = c("ind1", "ind2"), convert = T) %>%
# add expected_contribution of offspring 1
left_join(rename(lineage_table, ind1 = ind), by = c("mother", "ind1")) %>%
# add expected_contribution of offspring 2
left_join(rename(lineage_table, ind2 = ind), by = c("mother", "ind2"), suffix = c("1","2")) %>%
# coalescence probability is the product of both expected contributions
mutate(coalescence_probability = expected_contribution1 * expected_contribution2) %>%
# group by mothers to sum over all pairs of offspring
group_by(mother) %>%
# compute realized kinship for mothers at generation k
summarise(mothers_realized_kinship = 0.25 * sum(coalescence_probability))
mothers_coalescence_rate <-
mothers_at_generation_k %>%
# group offspring by their mothers
group_by(mother) %>%
# compute coalescence statistics for mothers at generation k
summarise(p_mother_is_ancestral = 1 - prod( (1 - p_individual_is_ancestral) / 2 + 0.5 ),
q_mother_no_coalescence = sum( p_individual_is_ancestral / 2 ),
mothers_coalescence_rate = q_mother_no_coalescence - p_mother_is_ancestral) %>%
ungroup() %>%
left_join(mothers_realized_kinship, by = "mother") %>%
rename(ind = mother)
# get offspring of fathers at generation k
fathers_at_generation_k <- filter(lineage_table, father %in% individuals_at_generation_k)
fathers_realized_kinship <-
# pairwise combination of all offspring sharing the same father
left_join(fathers_at_generation_k, fathers_at_generation_k, by = "father") %>%
# limit to distinct offspring
filter(ind.x != ind.y) %>%
rowwise %>%
# sort names to avoid reciprocal/duplicates
mutate(name = toString(sort(c(ind.x,ind.y)))) %>%
# limits to all unique pairs of offspring
distinct(father, name) %>%
# separate into numeric IDs for merging lineage table
separate(name, into = c("ind1", "ind2"), convert = T) %>%
# add expected_contribution of offspring 1
left_join(rename(lineage_table, ind1 = ind), by = c("father", "ind1")) %>%
# add expected_contribution of offspring 2
left_join(rename(lineage_table, ind2 = ind), by = c("father", "ind2"), suffix = c("1","2")) %>%
# coalescence probability is the product of both expected contributions
mutate(coalescence_probability = expected_contribution1 * expected_contribution2) %>%
# group by fathers to sum over all pairs of offspring
group_by(father) %>%
# compute realized kinship for fathers at generation k
summarise(fathers_realized_kinship = 0.25 * sum(coalescence_probability))
fathers_coalescence_rate <-
fathers_at_generation_k %>%
# group offspring by their fathers
group_by(father) %>%
# compute coalescence statistics for fathers at generation k
summarise(p_father_is_ancestral = 1 - prod( (1 - p_individual_is_ancestral) / 2 + 0.5 ),
q_father_no_coalescence = sum( p_individual_is_ancestral / 2 ),
fathers_coalescence_rate = q_father_no_coalescence - p_father_is_ancestral) %>%
ungroup() %>%
left_join(fathers_realized_kinship, by = "father")  %>%
rename(ind = father)
# recursion step updates coalescence statistics in lineage table for individuals at generation k
lineage_table <-
lineage_table %>%
# add coalescence statistics for mothers at generation k
left_join(mothers_coalescence_rate, by = "ind") %>%
# add coalescence statistics for fathers at generation k
left_join(fathers_coalescence_rate, by = "ind") %>%
# update coalescence statistics for individuals at generation k
mutate(
# if individual is a mother or father at generation k, update p_individual_is_ancestral
p_individual_is_ancestral = case_when(!is.na(p_mother_is_ancestral) ~ p_mother_is_ancestral,
!is.na(p_father_is_ancestral) ~ p_father_is_ancestral,
TRUE ~ p_individual_is_ancestral),
# if individual is a mother or father at generation k, update q_no_coalescence
q_no_coalescence = case_when(!is.na(q_mother_no_coalescence) ~ q_mother_no_coalescence,
!is.na(q_father_no_coalescence) ~ q_father_no_coalescence,
TRUE ~ q_no_coalescence),
# if individual is a mother or father at generation k, update coalescence_rate
coalescence_rate = case_when(!is.na(mothers_coalescence_rate) ~ mothers_coalescence_rate,
!is.na(fathers_coalescence_rate) ~ fathers_coalescence_rate,
TRUE ~ coalescence_rate),
# if individual is a mother or father at generation k, update realized_kinship
realized_kinship = case_when(!is.na(mothers_realized_kinship) ~ mothers_realized_kinship,
!is.na(fathers_realized_kinship) ~ fathers_realized_kinship,
TRUE ~ realized_kinship)) %>%
# keep original columns of lineage table (removes temp mother/father variables)
dplyr::select(ind, mother, father, generation, p_individual_is_ancestral, q_no_coalescence, coalescence_rate, expected_contribution, realized_kinship)
}
return(lineage_table)
}
# toy example with one coalescence at generation
pedigree <-
tibble(ind =    c(1,2,3,4,5,6,7,8),
father = c(3,5,7,NA,7,NA,NA,NA),
mother = c(4,6,8,NA,8,NA,NA,NA))
list_of_probands <- c(1,2,3)
coalescence_percolator(pedigree, list_of_probands)
list_of_probands <-
data.table::fread(file_name) %>%
filter(generation == 0) %>%
pull(ind)
demoPath <- '/Users/luke/Documents/simulate_real_pedigrees/'
file_name <- paste0(demoPath,"data/permute_1.csv")
pedigree <-
data.table::fread(file_name) %>%
dplyr::select(ind, mother, father)
list_of_probands <-
data.table::fread(file_name) %>%
filter(generation == 0) %>%
pull(ind)
start.time <- Sys.time()
lineage_table <- coalescence_percolator(pedigree, list_of_probands)
print(Sys.time() - start.time)
data.table::fwrite(lineage_table, file = paste0(demoPath,"statistics/permute_1_total.csv"))
setwd("/Users/luke/Documents/genome_simulations/code/R")
# load library
library(dplyr)
library(data.table)
# load function
source("maximum_genealogical_depth.R")
# load function
source("get_extended_family.R")
# load pedigree
raw_pedigree <- fread("/Users/luke/Documents/Genizon/BALSAC/Balsac_aout_2021_v2/tout_balsac.csv")
locations <- fread("/Users/luke/Documents/genome_simulations/misc/location_key.csv") %>% dplyr::rename(lieum = lieu)
#raw_pedigree <- fread("tout_balsac.csv")
# get balsac ids
balsac_ids <- unique(raw_pedigree$ind)
# generate new ID
set.seed(456)
new_id <- sample(length(balsac_ids)*10, length(balsac_ids))
recode_balsac_key <- tibble(ind = balsac_ids, new_id = new_id)
pedigree <- left_join(raw_pedigree, recode_balsac_key, by = "ind") %>%
left_join(locations, by = "lieum")
pedigree$decade <- pedigree$datem - pedigree$datem %% 10
probands <- pedigree %>%
filter(!ind %in% father,
!ind %in% mother,
!is.na(datem),
datem > 1900)
three_col_ped <- pedigree %>% select(ind, mother, father)
extended_families <- get_extended_family(three_col_ped, probands$ind)
relatives <- c("mother","father","grand_mother.mom","grand_father.mom","grand_mother.dad","grand_father.dad")
# count number of missing ancestors
extended_families$n_in <- rowSums( !is.na( select(extended_families, all_of(relatives))))
# keep track of individuals who are missing grand-parents
missing_grand_parents <- extended_families %>% filter(n_in<6) %>% pull(ind)
# NOTE: there are 311545 individuals removed
# create single list of IDs
list_of_probands <- probands %>% filter(!ind %in% missing_grand_parents) %>% pull(ind)
# NOTE: there are 1426749 probands included
length(list_of_probands)
